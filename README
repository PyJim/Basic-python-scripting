# Python File Management Lab Documentation

## Overview
This script demonstrates basic Python file handling operations, including directory management, file downloading, and content modification. It was created as part of a lab exercise to practice using essential Python modules such as `os`, `requests`, `shutil`, and `datetime`.

## Prerequisites
- Required packages:
  - requests
  - os
  - shutil
  - datetime

## Script Components

### 1. Module Imports
```python
import requests
import os
import shutil
from datetime import datetime
```
These imports provide necessary functionality for:
- `requests`: HTTP requests to download files
- `os`: File and directory operations
- `shutil`: Advanced file operations (like directory removal)
- `datetime`: Timestamp generation

### 2. Directory Management
The script first handles the directory setup:
```python
if os.path.exists('jimmy_essel'):
    try:
        shutil.rmtree('jimmy_essel')
        print(f"Directory 'jimmy_essel' has been removed successfully")
    except Exception as e:
        print(f"Error: {e}")
```
- Checks if a directory named 'jimmy_essel' exists
- If it exists, removes it and all its contents
- Handles potential errors during directory removal

### 3. Directory Creation
```python
download_folder = 'jimmy_essel'
if not os.path.exists(download_folder):
    os.mkdir(download_folder)
    print(f"Directory '{download_folder}' created")
```
- Creates a new directory named 'jimmy_essel'
- Prints confirmation message upon successful creation

### 4. File Download
```python
local_file_path = os.path.join(download_folder, 'jimmy_essel.txt')
url = "https://raw.githubusercontent.com/sdg000/pydevops_intro_lab/main/change_me.txt"
response = requests.get(url)
```
- Sets up the local file path using `os.path.join`
- Defines the source URL
- Downloads the file using requests
- Includes error handling for failed downloads (status code check)

### 5. File Content Modification
```python
user_input = input("What have you learned so far in a sentence: ")
now = datetime.now()
current_time = now.strftime("%Y-%m-%d %H:%M:%S")

with open(local_file_path, 'w') as file:
    file.write(user_input + '\n')
    file.write(f"Last modified on: {current_time}")
```
- Prompts user for input
- Generates current timestamp
- Overwrites the file with:
  - User input
  - Timestamp of modification

### 6. Content Verification
```python
with open(local_file_path, 'r') as file:
    print("\nYou Entered: ", end='')
    print(file.read())
```
- Reads and displays the modified file content
- Verifies the changes made to the file

## Error Handling
The script includes error handling for:
- Directory removal operations
- File download failures
- File operations (implicit through context managers)

## Output Examples
The script produces the following types of output messages:
1. Directory operations:
   - "Directory 'jimmy_essel' has been removed successfully"
   - "Directory 'jimmy_essel' created"
2. File operations:
   - "File successfully downloaded"
   - "File saved successfully"
   - "File successfully modified"
3. User input echo:
   - "You Entered: [user's input]"
   - "Last modified on: [timestamp]"

## Best Practices Demonstrated
1. Use of context managers (`with` statements) for file operations
2. Proper error handling and status checking
3. Clean directory management
4. Clear user feedback through print statements
5. Consistent file path handling using `os.path.join`

## Notes
- The script is designed to run repeatedly, cleaning up previous runs automatically
- All file operations use proper encoding and file modes
- The script maintains a clear separation of concerns between different operations
- User feedback is provided at each significant step